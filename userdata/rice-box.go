package userdata

import (
	"github.com/GeertJohan/go.rice/embedded"
	"time"
)

func init() {

	// define files
	file2 := &embedded.EmbeddedFile{
		Filename:    "userdata.sh",
		FileModTime: time.Unix(1542882283, 0),
		Content:     string("#!/bin/bash\n#\n# Copyright 2018, CS Systemes d'Information, http://www.c-s.fr\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nset -u -o pipefail\n\nfunction print_error {\n    read line file <<<$(caller)\n    echo \"An error occurred in line $line of file $file:\" \"{\"`sed \"${line}q;d\" \"$file\"`\"}\" >&2\n}\ntrap print_error ERR\n\n# Redirects outputs to /var/tmp/user_data.log\nexec 1<&-\nexec 2<&-\nexec 1<>/var/tmp/user_data.log\nexec 2>&1\n\nsfDetectFacts() {\n   local -g LINUX_KIND=$(cat /etc/os-release | grep \"^ID=\" | cut -d= -f2 | sed 's/\"//g')\n   local -g VERSION_ID=$(cat /etc/os-release | grep \"^VERSION_ID=\" | cut -d= -f2 | sed 's/\"//g')\n}\nsfDetectFacts\n\nsfWaitForApt() {\n    sfWaitLockfile apt /var/{lib/{dpkg,apt/lists},cache/apt/archives}/lock\n}\n\nsfWaitLockfile() {\n    local ROUNDS=600\n    name=$1\n    shift\n    params=$@\n    echo \"check $name lock\"\n    echo ${params}\n    if fuser ${params} &>/dev/null; then\n        echo \"${name} is locked, waiting... \"\n        local i\n        for i in $(seq $ROUNDS); do\n            sleep 6\n            fuser ${params} &>/dev/null || break\n        done\n        if [ $i -ge $ROUNDS ]; then\n            echo \"Timed out waiting (1 hour!) for ${name} lock!\"\n            exit 100\n        else\n            t=$(($i*6))\n            echo \"${name} is unlocked (waited $t seconds), continuing.\"\n        fi\n    else\n        echo \"${name} is ready\"\n    fi\n}\n\nfw_i_accept() {\n    iptables -A INPUT -j ACCEPT $*\n}\nfw_f_accept() {\n    iptables -A FORWARD -j ACCEPT $*\n}\n\nPR_IP=\nPR_IF=\nPU_IP=\nPU_IF=\ni_PR_IF=\ni_PU_IF=\no_PR_IF=\no_PU_IF=\n\nsfSaveIptablesRules() {\n   case $LINUX_KIND in\n       rhel|centos) iptables-save >/etc/sysconfig/iptables ;;\n       debian|ubuntu) iptables-save >/etc/iptables/rules.v4 ;;\n   esac\n}\n\ncreate_user() {\n    echo \"Creating user {{ .User }}...\"\n    useradd {{ .User }} --home-dir /home/{{ .User }} --shell /bin/bash --comment \"\" --create-home\n    echo \"gpac:{{ .Password }}\" | chpasswd\n    groupadd -r docker\n    usermod -aG docker gpac\n    echo \"{{ .User }} ALL=(ALL) NOPASSWD:ALL\" >>/etc/sudoers\n\n    mkdir /home/{{ .User }}/.ssh\n    echo \"{{ .PublicKey }}\" >>/home/{{ .User }}/.ssh/authorized_keys\n    echo \"{{ .PrivateKey }}\" >/home/{{ .User }}/.ssh/id_rsa\n    chmod 0700 /home/{{ .User }}/.ssh\n    chmod -R 0600 /home/{{ .User }}/.ssh/*\n\n    touch /home/{{ .User }}/.hushlogin\n\n    cat >>/home/gpac/.bashrc <<-'EOF'\npathremove() {\n        local IFS=':'\n        local NEWPATH\n        local DIR\n        local PATHVARIABLE=${2:-PATH}\n        for DIR in ${!PATHVARIABLE} ; do\n                if [ \"$DIR\" != \"$1\" ] ; then\n                  NEWPATH=${NEWPATH:+$NEWPATH:}$DIR\n                fi\n        done\n        export $PATHVARIABLE=\"$NEWPATH\"\n}\npathprepend() {\n        pathremove $1 $2\n        local PATHVARIABLE=${2:-PATH}\n        export $PATHVARIABLE=\"$1${!PATHVARIABLE:+:${!PATHVARIABLE}}\"\n}\npathappend() {\n        pathremove $1 $2\n        local PATHVARIABLE=${2:-PATH}\n        export $PATHVARIABLE=\"${!PATHVARIABLE:+${!PATHVARIABLE}:}$1\"\n}\npathprepend $HOME/.local/bin\nEOF\n\n    chown -R {{ .User }}:{{ .User }} /home/{{ .User }}\n    echo done\n}\n\n# Configure network for Debian distribution\nconfigure_network_debian() {\n    echo \"Configuring network (debian-based)...\"\n    local path=/etc/network/interfaces.d\n    local cfg=$path/50-cloud-init.cfg\n    rm -f $cfg\n    mkdir -p $path\n\n    for IF in $(ls /sys/class/net); do\n        if [ $IF != \"lo\" ]; then\n            echo \"auto ${IF}\" >>$cfg\n            echo \"iface ${IF} inet dhcp\" >>$cfg\n        fi\n    done\n\n    systemctl restart networking\n    echo done\n}\n\n# Configure network using netplan\nconfigure_network_netplan() {\n    echo \"Configuring network (netplan-based)...\"\n\n    mv -f /etc/netplan /etc/netplan.orig\n    mkdir -p /etc/netplan\n    cat <<-'EOF' >/etc/netplan/50-cloud-init.yaml\nnetwork:\n  version: 2\n  renderer: networkd\n  ethernets:\n    ens3:\n      dhcp4: true\n    ens4:\n      dhcp4: true\n{{- if .GatewayIP }}\n      gateway4: {{ .GatewayIP }}\n{{- end }}\nEOF\n    netplan generate\n    netplan apply\n\n    echo done\n}\n\n# Configure network for redhat-like distributions (rhel, centos, ...)\nconfigure_network_redhat() {\n    echo \"Configuring network (redhat-like)...\"\n\n    # We don't want NetworkManager\n    systemctl disable NetworkManager &>/dev/null\n    systemctl stop NetworkManager &>/dev/null\n    yum remove -y NetworkManager &>/dev/null\n    systemctl restart network\n\n    # Configure all network interfaces in dhcp\n    for IF in $(ls /sys/class/net); do\n        if [ $IF != \"lo\" ]; then\n            cat >/etc/sysconfig/network-scripts/ifcfg-$IF <<-EOF\nDEVICE=$IF\nBOOTPROTO=dhcp\nONBOOT=yes\nEOF\n        fi\n    done\n    systemctl restart network\n\n    echo done\n}\n\nreset_fw() {\n    case $LINUX_KIND in\n        debian|ubuntu)\n            systemctl stop ufw &>/dev/null\n            systemctl disable ufw &>/dev/null\n            sfWaitForApt && apt purge -q ufw &>/dev/null\n            ;;\n\n        rhel|centos)\n            systemctl disable firewalld &>/dev/null\n            systemctl stop firewalld &>/dev/null\n            systemctl mask firewalld &>/dev/null\n            yum remove -y firewalld &>/dev/null\n            ;;\n    esac\n\n}\n\nenable_iptables() {\n    case $LINUX_KIND in\n        debian|ubuntu)\n            sfWaitForApt && apt update\n            sfWaitForApt && apt install -y -q iptables-persistent\n            [ $? -ne 0 ] && {\n                mkdir -p /etc/iptables /etc/network/if-pre-up.d\n                cd /etc/network/if-pre-up.d\n                cat <<-'EOF' >iptables\n#!/bin/sh\nDIR=/etc/iptables\nmkdir -p $DIR\n[ -f $DIR/rules.v4 ] && iptables-restore <$DIR/rules.v4\nEOF\n                chmod a+rx iptables\n            }\n            ;;\n\n        rhel|centos)\n            yum install -y iptables-services\n            systemctl enable iptables\n            systemctl enable ip6tables\n            systemctl start iptables\n            systemctl start ip6tables\n            ;;\n    esac\n\n    # We flush the current firewall rules possibly introduced by iptables service\n    iptables -F\n    sfSaveIptablesRules\n    #iptables-save | awk '/^[*]/ { print $1 }\n    #                     /^:[A-Z]+ [^-]/ { print $1 \" ACCEPT\" ; }\n    #                     /COMMIT/ { print $0; }' | iptables-restore\n}\n\nconfigure_as_gateway() {\n    echo \"Configuring host as gateway...\"\n\n    reset_fw\n    enable_iptables\n\n    # Change default policy for table filter chain INPUT to be DROP (block everything)\n    iptables -P INPUT DROP\n    # Opens up the required (loopback comm, ping, ssh, established connection)\n    fw_i_accept -i lo\n    fw_i_accept -p icmp --icmp-type 8 -s 0/0 -m state --state NEW,ESTABLISHED,RELATED\n    fw_i_accept -p icmp --icmp-type 0 -s 0/0 -m state --state ESTABLISHED,RELATED\n    fw_i_accept -m conntrack --ctstate ESTABLISHED,RELATED\n    fw_i_accept -p tcp --dport ssh\n\n    PU_IP=$(curl ipinfo.io/ip 2>/dev/null)\n    PU_IF=$(netstat -ie | grep -B1 ${PU_IP} | head -n1 | awk '{print $1}')\n    PU_IF=${PU_IF%%:}\n\n    for IF in $(ls /sys/class/net); do\n        if [ \"$IF\" != \"lo\" ] && [ \"$IF\" != \"$PU_IF\" ]; then\n            PR_IP=$(ip a | grep $IF | grep inet | awk '{print $2}' | cut -d '/' -f1)\n            PR_IF=$IF\n        fi\n    done\n\n    [ -z ${PR_IP} ] && return 1\n\n    if [ ! -z $PR_IF ]; then\n        # Enable forwarding\n        for i in /etc/sysctl.d/* /etc/sysctl.conf; do\n            grep -v \"net.ipv4.ip_forward=\" $i >${i}.new\n            mv -f ${i}.new ${i}\n        done\n        echo \"net.ipv4.ip_forward=1\" >/etc/sysctl.d/98-forward.conf\n        systemctl restart systemd-sysctl\n\n        # Routing\n        o_PR_IF=\"-o $PR_IF\"\n        i_PR_IF=\"-i $PR_IF\"\n        [ ! -z $PU_IF ] && o_PU_IF=\"-o $PU_IF\" && i_PU_IF=\"-i $PU_IF\"\n        iptables -t nat -A POSTROUTING -j MASQUERADE $o_PU_IF\n        fw_f_accept $i_PR_IF $o_PU_IF -s {{ .CIDR }}\n        fw_f_accept $i_PU_IF $o_PR_IF -m state --state RELATED,ESTABLISHED\n    fi\n\n    sfSaveIptablesRules\n\n    grep -vi AllowTcpForwarding /etc/ssh/sshd_config >/etc/ssh/sshd_config.new\n    echo \"AllowTcpForwarding yes\" >>/etc/ssh/sshd_config.new\n    mv /etc/ssh/sshd_config.new /etc/ssh/sshd_config\n    systemctl restart ssh\n\n    echo done\n}\n\nconfigure_dns_legacy() {\n    echo \"Configuring /etc/resolv.conf...\"\n\n    cat <<-'EOF' >/etc/resolv.conf\n{{- if .DNSServers }}\n  {{- range .DNSServers }}\nnameserver {{ . }}\n  {{- end }}\n{{- else }}\nnameserver 1.1.1.1\n{{- end }}\nEOF\n}\n\nconfigure_dns_resolvconf() {\n    echo \"Configuring resolvconf...\"\n\n    cat <<-'EOF' >/etc/resolvconf/resolv.conf.d/base\n{{- if .DNSServers }}\n  {{- range .DNSServers }}\nnameserver {{ . }}\n  {{- end }}\n{{- else }}\nnameserver 1.1.1.1\n{{- end }}\nEOF\n    #rm -f /etc/resolvconf/resolv.conf.d/tail\n    systemctl restart resolvconf\n}\n\nconfigure_dns_systemd_resolved() {\n    echo \"Configuring systemd-resolved...\"\n\n    cat <<-'EOF' >/etc/systemd/resolved.conf\n[Resolve]\n{{- if .DNSServers }}\nDNS={{ range .DNSServers }}{{ . }} {{ end }}\n{{- else }}\nDNS=1.1.1.1\n{{- end}}\n#FallbackDNS=\n#Domains=\n#LLMNR=no\n#MulticastDNS=no\n#DNSSEC=no\nCache=yes\nDNSStubListener=yes\nEOF\n    systemctl restart systemd-resolved\n}\n\nconfigure_gateway() {\n    echo \"Configuring default router to {{ .GatewayIP }}\"\n\n    reset_fw\n\n    route del -net default &>/dev/null\n\n    cat <<-'EOF' > /sbin/gateway\n#!/bin/sh -\necho \"configure default gateway\"\n/sbin/route add -net default gw {{ .GatewayIP }}\nEOF\n    chmod u+x /sbin/gateway\n    cat <<-'EOF' > /etc/systemd/system/gateway.service\nDescription=create default gateway\nAfter=network.target\n\n[Service]\nExecStart=/sbin/gateway\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    systemctl enable gateway\n    systemctl start gateway\n\n    enable_iptables\n\n    echo done\n}\n\nconfigure_gateway_redhat() {\n    echo \"Configuring default router to {{ .GatewayIP }}\"\n\n    reset_fw\n\n    route del -net default &>/dev/null\n    route add default gw {{.GatewayIP}}\n    echo \"GATEWAY={{.GatewayIP}}\" >/etc/sysconfig/network\n\n    enable_iptables\n\n    echo done\n}\n\n#TODO be more modular on the choice of the driver version (get the newest)\ninstall_drivers_nvidia() {\n    case $LINUX_KIND in\n        ubuntu)\n            add-apt-repository -y ppa:graphics-drivers &>/dev/null\n            apt update &>/dev/null\n            case $VERSION_ID in\n            18.04)\n                driver=`apt search nvidia-driver | grep ^nvidia-driver-[1-9] | sort | tail -1 | cut -d/ -f1`\n                ;;\n            16.04)\n                driver=`apt search nvidia-driver | grep ^nvidia-[1-9] | sort | tail -1 | cut -d/ -f1`\n                ;;\n            *)\n                #untested but should work for versions 16.10 17.04 17.10\n                driver=`apt search nvidia-driver | grep ^nvidia-[1-9] | sort | tail -1 | cut -d/ -f1`\n                ;;\n            esac\n            apt -y install $driver &>/dev/null\n            ;;\n        debian)\n            if [ ! -f /etc/modprobe.d/blacklist-nouveau.conf ]; then\n                echo -e \"blacklist nouveau\\nblacklist lbm-nouveau\\noptions nouveau modeset=0\\nalias nouveau off\\nalias lbm-nouveau off\" >>/etc/modprobe.d/blacklist-nouveau.conf\n                rmmod nouveau\n            fi\n            apt update &>/dev/null && apt install -y dkms build-essential linux-headers-$(uname -r) gcc make &>/dev/null\n            dpkg --add-architecture i386 &>/dev/null\n            apt update &>/dev/null && apt install -y lib32z1 lib32ncurses5 &>/dev/null\n            wget http://us.download.nvidia.com/XFree86/Linux-x86_64/410.78/NVIDIA-Linux-x86_64-410.78.run &>/dev/null\n            bash NVIDIA-Linux-x86_64-410.78.run -s\n            ;;\n        centos)\n            if [ ! -f /etc/modprobe.d/blacklist-nouveau.conf ]; then\n                echo -e \"blacklist nouveau\\noptions nouveau modeset=0\" >>/etc/modprobe.d/blacklist-nouveau.conf\n                dracut --force\n                rmmod nouveau\n            fi\n            yum -y -q install kernel-devel.$(uname -i) kernel-headers.$(uname -i) gcc make &>/dev/null\n            wget http://us.download.nvidia.com/XFree86/Linux-x86_64/410.78/NVIDIA-Linux-x86_64-410.78.run\n            bash NVIDIA-Linux-x86_64-410.78.run -s\n            rm NVIDIA-Linux-x86_64-410.78.run\n            ;;\n        *)\n            echo \"Unsupported Linux distribution '$LINUX_KIND'!\"\n            exit 1\n            ;;\n    esac\n}\n\ninstall_packages() {\n     case $LINUX_KIND in\n        ubuntu|debian)\n            apt install -y pciutils curl apt-transport-https &>/dev/null\n            ;;\n        redhat|centos)\n            yum install -y pciutils wget &>/dev/null\n            ;;\n        *)\n            echo \"Unsupported Linux distribution '$LINUX_KIND'!\"\n            exit 1\n            ;;\n     esac\n}\n\ncase $LINUX_KIND in\n    debian|ubuntu)\n        export DEBIAN_FRONTEND=noninteractive\n        systemctl stop apt-daily.service &>/dev/null\n        systemctl kill --kill-who=all apt-daily.service &>/dev/null\n        create_user\n        {{- if .ConfIF }}\n        systemctl status systemd-networkd &>/dev/null && configure_network_netplan || configure_network_debian\n        {{- end }}\n        {{- if .IsGateway }}\n        configure_as_gateway\n        {{- else if .AddGateway }}\n        systemctl status systemd-resolved &>/dev/null && configure_dns_systemd_resolved || configure_dns_resolvconf\n        configure_gateway\n        {{- end }}\n        ;;\n\n    redhat|centos)\n        create_user\n        {{- if .ConfIF }}\n        configure_network_redhat\n        {{- end }}\n        {{- if .IsGateway }}\n        configure_as_gateway\n        {{- else if .AddGateway }}\n        configure_dns_legacy\n        configure_gateway_redhat\n        {{- end }}\n        ;;\n    *)\n        echo \"Unsupported Linux distribution '$LINUX_KIND'!\"\n        exit 1\n        ;;\nesac\n\ninstall_packages\nlspci | grep -i nvidia &>/dev/null && install_drivers_nvidia\n\necho \"${LINUX_KIND},$(date +%Y/%m/%d-%H:%M:%S)\" >/var/tmp/user_data.done\nsystemctl reboot\nexit 0\n"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1542878047, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file2, // "userdata.sh"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`../userdata/scripts`, &embedded.EmbeddedBox{
		Name: `../userdata/scripts`,
		Time: time.Unix(1542878047, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"": dir1,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"userdata.sh": file2,
		},
	})
}
